Day changed to 16 Mar 2014
17:43 <torbjorn> so i had a look at Config::ZOMG and created code to make Config::Loader a drop-in replacement for ::ZOMG that passes all the tests of Config::ZOMG
17:43 -!- mst is away: gone
17:43 <torbjorn> won't be wearing shoes for a while, this took all my shoehorns
17:44 <torbjorn> i created a Config::Loader::Shoehorn::ZOMG . If Config::Loader use base that module, it passes as a drop-in replacement for Config::ZOMG
17:46 <torbjorn> That being said, having looked at it, I don't like Config::ZOMG much, compared to Config::Loader its a monolithic patchjob , striving to comply with that would be heading in the
                 wrong direction id say
17:47 <torbjorn> there is free test suite ofcource, but the api and usecases of ::ZOMG isn't that interesting
17:48 <torbjorn> http://paste.scsys.co.uk/326047
17:48 <torbjorn> so far i have worked only to pass tests, not to implement the api, but its a first step
17:53 <torbjorn> there's a lot of stupid things in that code, like line 287 in that module
17:54 <torbjorn> I did that to pass tests like this: http://paste.scsys.co.uk/326049
18:14 <mst> good afternoon
18:14 <mst> well, ZOMG was a sort of extraction of the logic of C::C::ConfigLoader
18:14 <mst> if you've got as far as ZOMG working, then we can probably port the later
18:14 <mst> *latter
18:15 <mst> at which point ZOMG basically ceases to matter because we can recommend that people use the C::P::CL Config::Loader profile directly
19:01 <torbjorn> i see, id have to explore the api more than the ZOMG tests do before its complete
19:01 <torbjorn> i could have a go at C::P::CL afterwards
19:05 <mst> I suspect you'll find C::P::CL is actually easier than ZOMG now you've done ZOMG
19:05 <mst> if we've got *that* working, the next step is likely for you and I to start porting our unrelated stuff and see if the API does everything we need
19:07 <torbjorn> ZOMG is substantially different from Config::Loader in that it has a sub new
19:08 <torbjorn> so to make tests pass i had to create a sub new for ::Loader which is not how that was ment to work
19:09 <torbjorn> how will that be in the future, im happy with the way ::Loader dispatches objects now
19:10 <mst> wait, huh?
19:10 <mst> Config::Loader isn't even a class, making ZOMG a subclass makes no sense at all
19:11 <mst> the idea is to have ZOMG *uses* C::L
19:11 <mst> the C::L get_config interface is the scripting interface for people who aren't making an object
19:11 <torbjorn> oooh. i made C::L become ZOMG
19:11 <mst> no wonder it was a horrible hack
19:11 <torbjorn> indeed
19:11 <mst> argh. clearly this was not as obvious from the code as I thought it was :)
19:12 <mst> yeah, here we go
19:12 <mst> I was expecting you to have, in Config::ZOMG
19:12 <mst> something like
19:12 <mst> has _config_loader => (is => 'lazy', builder => sub { Config::Loader->new_source(...) });
19:13 <mst> FSVO '...' that would set it up right
19:15 <torbjorn> yeah. well i had fun doing it at least and got to see lots of intestins.
19:15 <torbjorn> ill make it so.
19:15 <mst> right, you were attempting to build something on somebody else's mostly undocumented code
19:16 <mst> note: the POD in there is kaitlyn's from before the big refactor
19:16 <mst> it's entirely possible I've made some of it a lie and not noticed
19:16 <torbjorn> ok, i didnt read it much
19:16 <mst> that's possibly a good thing
19:16 <mst> but, yeah, so long as you got to see lots of guts, call it a successful exercise even if you're throwing away the resulting code
19:16 <torbjorn> it was mainly about the functional / oo differences? which is easily spotted in source
19:17 <mst> does the way the merge source let's you chain 'em together make sense to you?
19:17 <mst> right, that and moving the logic out of C::L
19:17 <mst> kaitlyn had this vision of something that you'd use in scripts etc. where you'd just call get_config() and not think about it
19:17 <torbjorn> i share that vision
19:18 <mst> right, but to achieve that vision, people need to be able to make get_config() do what they want, you can't have a single set of defaults that DWIM for everybody
19:18 <torbjorn> ofcourse
19:18 <mst> hence my refactoring it to within an inch of its life to make it properly configurable
19:18 <torbjorn> that makes perfect sense
19:19 <torbjorn> what was that chaining you talked about?
19:19 <mst> that train ride was not funny, when I explained that the get_config() interface was currently basically useless to me she got really quite upset with me
19:19 <mst> admittedly, we were both tired and she'd just attended her first LPW and given her first talks, so we were both frazzled
19:19 <torbjorn> getting people upset is how you make them work, isnt it :)
19:20 <torbjorn> make yourself work even
19:21 <mst> ah, here we go
19:21 <mst> by chaining I mean, Config::Loader::SourceRole::Filter
19:21 <mst> so merge lets you take several forms of config and put them together
19:21 <mst> and filter lets you do transforms, sort of a decorator
19:33 <torbjorn> ah yes, like having TT in config values, like your example
19:34 <torbjorn> do you have other relevant uses for filter_config, would be nice to have several examples in tests
19:35 <mst> the expand_hash one is already there in tree
19:35 <mst> err
19:35 <torbjorn> a simple cgi app under apache perhaps, could filter out ^HTTP_ keys from %ENV
19:35 <mst> oh. the Catalyst ___foo(...)__ syntax
19:35 <torbjorn> not sure how relevant that is
19:35 <mst> that's what originally reminded me I'd need filters
19:36 <torbjorn> hm yes
19:39 <torbjorn> ill get back to it and see if i can mess it up again
19:39 <mst> awesome.
